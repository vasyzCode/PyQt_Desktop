# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox.setObjectName("comboBox")
        self.horizontalLayout.addWidget(self.comboBox)
        self.comboBox_2 = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_2.setObjectName("comboBox_2")
        self.horizontalLayout.addWidget(self.comboBox_2)
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout.addWidget(self.pushButton)
        self.gridLayout.addLayout(self.horizontalLayout, 0, 0, 1, 1)
        self.tableWidget = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(3)
        self.tableWidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(2, item)
        self.gridLayout.addWidget(self.tableWidget, 1, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 18))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Результат олимпиады: фильтрация"))
        self.pushButton.setText(_translate("MainWindow", "Узнать результаты"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Фамилия"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Результат"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Логин"))

        import csv
        schools = []
        classes = []
        self.comboBox.addItem('Все')
        self.comboBox_2.addItem('Все')
        with open('rez.csv', encoding="utf8") as csvfile:
            reader = csv.reader(csvfile, delimiter=',', quotechar='"')
            for index, row in enumerate(reader):
                if index != 0:
                    if row[2].split('sh-kaluga16-')[-1].split('-')[0] not in schools:
                        schools.append(row[2].split('sh-kaluga16-')[-1].split('-')[0])
                    if row[2].split('sh-kaluga16-')[-1].split('-')[1] not in classes:
                        classes.append(row[2].split('sh-kaluga16-')[-1].split('-')[1])
            self.comboBox.addItems(i for i in schools)
            self.comboBox_2.addItems(i for i in classes)
        self.search()
        self.pushButton.clicked.connect(self.search)

    def search(self):
        while self.tableWidget.rowCount() > 0:
            self.tableWidget.removeRow(0)
        import csv
        school_numb, class_numb = [int(self.comboBox.currentText()) if self.comboBox.currentText() != 'Все' else 'Все',
                                   int(
                                       self.comboBox_2.currentText()) if self.comboBox_2.currentText() != 'Все' else 'Все']
        users = {}
        rows = []
        names = []
        with open('rez.csv', encoding="utf8") as csvfile:
            reader = csv.reader(csvfile, delimiter=',', quotechar='"')
            for index, row in enumerate(reader):
                if index != 0:
                    if school_numb != 'Все' and class_numb != 'Все':
                        if int(row[2].split('sh-kaluga16-')[-1].split('-')[0]) == school_numb:
                            if int(row[2].split('sh-kaluga16-')[-1].split('-')[1]) == class_numb:
                                if row[-1] not in users:
                                    users[row[-1]] = []
                                    users[row[-1]].append(row[1].split(' ')[-2])
                                else:
                                    users[row[-1]].append(row[1].split(' ')[-2])
                    elif school_numb == 'Все' and class_numb != 'Все':
                        if int(row[2].split('sh-kaluga16-')[-1].split('-')[0]):
                            if int(row[2].split('sh-kaluga16-')[-1].split('-')[1]) == class_numb:
                                if row[-1] not in users:
                                    users[row[-1]] = []
                                    users[row[-1]].append(row[1].split(' ')[-2])
                                else:
                                    users[row[-1]].append(row[1].split(' ')[-2])
                    elif school_numb != 'Все' and class_numb == 'Все':
                        if int(row[2].split('sh-kaluga16-')[-1].split('-')[0]) == school_numb:
                            if int(row[2].split('sh-kaluga16-')[-1].split('-')[1]):
                                if row[-1] not in users:
                                    users[row[-1]] = []
                                    users[row[-1]].append(row[1].split(' ')[-2])
                                else:
                                    users[row[-1]].append(row[1].split(' ')[-2])
                    else:
                        if int(row[2].split('sh-kaluga16-')[-1].split('-')[0]):
                            if int(row[2].split('sh-kaluga16-')[-1].split('-')[1]):
                                if row[-1] not in users:
                                    users[row[-1]] = []
                                    users[row[-1]].append(row[1].split(' ')[-2])
                                else:
                                    users[row[-1]].append(row[1].split(' ')[-2])
                    rows.append(row)
                    names.append(row[1].split(' ')[-2])
        for user in users:
            users[user].sort(reverse=True)
        i = 0
        for user in users:
            if i == 0:
                color = 249, 166, 2
                i += 1
            elif i == 1:
                color = 192, 192, 192
                i += 1
            elif i == 2:
                color = 205, 127, 50
                i += 1
            elif i == 3:
                color = 255, 255, 255
            else:
                color = 255, 255, 255
            for user_name in users[user]:
                rowPosition = self.tableWidget.rowCount()
                self.tableWidget.insertRow(rowPosition)
                new_item = QtWidgets.QTableWidgetItem(user_name)
                new_item.setBackground(QtGui.QBrush(QtGui.QColor(*color)))
                self.tableWidget.setItem(rowPosition, 0, new_item)
                new_item = QtWidgets.QTableWidgetItem(user)
                new_item.setBackground(QtGui.QBrush(QtGui.QColor(*color)))
                self.tableWidget.setItem(rowPosition, 1, new_item)
                new_item = QtWidgets.QTableWidgetItem(rows[names.index(user_name)][1])
                new_item.setBackground(QtGui.QBrush(QtGui.QColor(*color)))
                self.tableWidget.setItem(rowPosition, 2, new_item)


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
